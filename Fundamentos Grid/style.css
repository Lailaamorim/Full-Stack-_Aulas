body {
    margin: 0;
}

#app {
    display: grid;
    grid-template-columns: repeat(3, 1fr); /* 3 colunas de tamanhos iguais */
    grid-template-rows: 3, 1fr;
    height: 100vh;
}
/* Mesmo com os elemento inline, assim que apliquei o grid, eles 
viraram block, pois eles s√£o controlados pelo pai */

#app > div {
    border: 1px solid red;
}

span {
    border: 1px solid blue;
}

/* 

## CONTAINER (PAI)
         - Grid-template;
         - Grid-template-columns;
         - Grid-template-rows; 
         - Grid-template-areas;

## ITEMS (FILHOS)

    *Grid-columns;

         - Grid-column-start;
         - Grid-column-end;

    *Grid-rows; 

         - Grid-row-start;
         - Grid-row-end;
        
----------------------------------------------------------------------------------------------
  
1. grid-template

Define as linhas e colunas da grade em um √∫nico atalho. Pode incluir grid-template-rows, 
grid-template-columns e grid-template-areas.
        
.container {
  display: grid;
  grid-template: 100px 200px / 1fr 2fr; ( linhas e 2 colunas )
}

Isso cria:

Duas linhas: a primeira com 100px e a segunda com 200px.
Duas colunas: a primeira ocupando 1 fra√ß√£o do espa√ßo dispon√≠vel e a segunda, 2 fra√ß√µes.

----------------------------------------------------------------------------------------------

2. grid-template-columns
Define a quantidade e o tamanho das colunas na grade.

Isso cria:

.container {
  display: grid;
  grid-template-columns: 100px auto 1fr;
}

A primeira coluna com 100px.
A segunda ajustando-se automaticamente ao conte√∫do.
A terceira ocupando o espa√ßo restante.

----------------------------------------------------------------------------------------------

3. grid-template-rows
Define a quantidade e o tamanho das linhas na grade.

.container {
  display: grid;
  grid-template-rows: 100px 150px;
}

Isso cria:

A primeira linha com 100px.
A segunda linha com 150px.

4. grid-template-areas
Define √°reas nomeadas dentro da grade, facilitando a organiza√ß√£o visual.

Exemplo:

.container {
  display: grid;
  grid-template-columns: 1fr 2fr;
  grid-template-rows: 100px 200px;
  grid-template-areas: 
    "header header"
    "sidebar main";
}

.header { grid-area: header; }
.sidebar { grid-area: sidebar; }
.main { grid-area: main; }

Isso cria:

A primeira linha ocupada pelo header.
A segunda linha dividida entre sidebar e main.



#app1 div:nth-child(1) {
    grid-column-start: 1;
    grid-column-end: 4;
     
}
    O seletor #app1 div:nth-child(1) significa:

üîπ #app1 ‚Üí Seleciona um elemento com o ID "app1".
üîπ div:nth-child(1) ‚Üí Seleciona o primeiro filho dentro de #app1 que seja uma div.

<div id="app1">
  <div>Primeira div</div>  <!-- ‚úÖ Este ser√° estilizado -->
  <div>Segunda div</div>
  <p>Par√°grafo</p>
</div>



*/